{"version":3,"sources":["cypress.config.ts"],"names":["cypress","require","cypress_1","cypress_cucumber_preprocessor_1","preprocessor","browserify_1","sqlServer","excelToJson","fs","setupNodeEvents","on","config","db","userName","password","server","options","database","encrypt","rowCollectionOnRequestCompletion","addCucumberPreprocessorPlugin","_a","sent","typescript","resolve","tasks","loadDBPlugin","excelToJsonConverter","filePath","source","readFileSync","exports","defineConfig","defaultCommandTimeout","env","url","e2e","baseUrl","specPattern","projectId","retries","runMode"],"mappings":"y7CAAA,IAAMA,QAAUC,QAAQ,WACxBC,UAAAD,QAAA,WACAE,gCAAAF,QAAA,2CACMG,aAAeH,QAAQ,2CAC7BI,aAAAJ,QAAA,sDACMK,UAAYL,QAAQ,sBACpBM,YAAcN,QAAQ,yBACtBO,GAAKP,QAAQ,MAsBnB,SAAeQ,gBAAgBC,EAAIC,mHAYjC,OAXAA,EAAOC,GAAK,CACVC,SAAU,eACVC,SAAU,eACVC,OAAQ,gDACRC,QAAS,CACPC,SAAU,0BACVC,SAAS,EACTC,kCAAkC,IAItC,CAAA,EAAMhB,gCAAAiB,8BAA8BV,EAAIC,WAuBxC,OAvBAU,EAAAC,OACAZ,EACE,oBACAL,aAAA,QAAWM,EAAQ,CACjBY,WAAYtB,QAAQuB,QAAQ,iBAI1BC,EAAQnB,UAAUoB,aAAaf,EAAOC,IAC5CF,EAAG,OAAQe,GAEXf,EAAG,OAAQ,CACTiB,qBAAoB,SAACC,GAMnB,OALerB,YAAY,CACzBsB,OAAQrB,GAAGsB,aACT,sDAQR,CAAA,EAAOnB,QAGToB,QAAA,QAAe7B,UAAA8B,aAAa,CAC1BC,sBAAuB,KACvBC,IAAK,CACHC,IAAK,kCAEPC,IAAK,CACHC,QAAS,iCACT5B,gBAAeA,gBAEf6B,YAAa,qCAEfC,UAAW,SACXC,QAAS,CACPC,QAAS","file":"cypress.config.min.js","sourcesContent":["const cypress = require(\"cypress\");\nimport { defineConfig } from \"cypress\";\nimport { addCucumberPreprocessorPlugin } from \"@badeball/cypress-cucumber-preprocessor\";\nconst preprocessor = require(\"@badeball/cypress-cucumber-preprocessor\");\nimport browserify from \"@badeball/cypress-cucumber-preprocessor/browserify\";\nconst sqlServer = require(\"cypress-sql-server\");\nconst excelToJson = require(\"convert-excel-to-json\");\nconst fs = require(\"fs\");\n\n// async function setupNodeEvents(\n//   on: Cypress.PluginEvents,\n//   config: Cypress.PluginConfigOptions\n// ): Promise<Cypress.PluginConfigOptions> {\n//   // This is required for the preprocessor to be able to generate JSON reports after each run, and more,\n//   await addCucumberPreprocessorPlugin(on, config);\n//   on(\n//     \"file:preprocessor\",\n//     browserify(config, {\n//       typescript: require.resolve(\"typescript\"),\n//     })\n//   );\n\n//   tasks = sqlServer.loadDBPlugin(config.db);\n//   on(\"task\", tasks);\n\n//   // Make sure to return the config object as it might have been modified by the plugin.\n//   return config;\n// }\n\nasync function setupNodeEvents(on, config) {\n  config.db = {\n    userName: \"cypressadmin\",\n    password: \"Newuser@1234\",\n    server: \"azure-cypress-sql-server.database.windows.net\",\n    options: {\n      database: \"AzureCypressSQLDatabase\",\n      encrypt: true,\n      rowCollectionOnRequestCompletion: true,\n    },\n  };\n  // This is required for the preprocessor to be able to generate JSON reports after each run, and more,\n  await addCucumberPreprocessorPlugin(on, config);\n  on(\n    \"file:preprocessor\",\n    browserify(config, {\n      typescript: require.resolve(\"typescript\"),\n    })\n  );\n\n  const tasks = sqlServer.loadDBPlugin(config.db);\n  on(\"task\", tasks);\n\n  on(\"task\", {\n    excelToJsonConverter(filePath) {\n      const result = excelToJson({\n        source: fs.readFileSync(\n          \"cypress/downloads/order-invoice_fagun.qa.xlsx\"\n        ), // fs.readFileSync return a Buffer\n      });\n      return result\n    },\n  });\n\n  // Make sure to return the config object as it might have been modified by the plugin.\n  return config;\n}\n\nexport default defineConfig({\n  defaultCommandTimeout: 15000,\n  env: {\n    url: \"https://rahulshettyacademy.com\",\n  },\n  e2e: {\n    baseUrl: \"https://rahulshettyacademy.com\",\n    setupNodeEvents,\n    // specPattern: 'cypress/integration/examples/*.ts',\n    specPattern: \"cypress/integration/examples/*.ts\",\n  },\n  projectId: \"5e8n7q\",\n  retries: {\n    runMode: 0,\n  },\n});\n"]}