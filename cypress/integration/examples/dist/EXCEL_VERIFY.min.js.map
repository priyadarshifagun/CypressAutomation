{"version":3,"sources":["EXCEL_VERIFY.ts"],"names":["excelToJson","require","fs","describe","it","__awaiter","cy","LoginAPI","then","visit","onBeforeLoad","window","localStorage","setItem","Cypress","env","get","eq","click","element","prodText","text","contains","type","wait","each","$el","index","$list","trim","wrap","el","expect","toUpperCase","to","include","config","task","result","console","log","data","equal","B","readFile"],"mappings":"y7CAEA,IAAMA,YAAcC,QAAQ,yBACtBC,GAAKD,QAAQ,MAGnBE,SAAS,eAAgB,WACvBC,GAAG,gCAAiC,WAAA,OAAAC,eAAA,OAAA,OAAA,EAAA,4DAIlCC,GAAGC,WAAWC,KAAK,WACjBF,GAAGG,MAAM,wCAAyC,CAChDC,aAAc,SAAUC,GACtBA,EAAOC,aAAaC,QAAQ,QAASC,QAAQC,IAAI,eAIvDT,GAAGU,IAAI,kCAAkCC,GAAG,GAAGC,QAC/CZ,GAAGU,IAAI,gBACJC,GAAG,GACHT,KAAK,SAACW,GACLC,EAAWD,EAAQE,SAEvBf,GAAGU,IAAI,wCAAwCE,QAC/CZ,GAAGgB,SAAS,YAAYJ,QAExBZ,GAAGU,IAAI,uCAAuCO,KAAK,OACnDjB,GAAGkB,KAAK,KACRlB,GAAGU,IAAI,2BAA2BS,KAAK,SAACC,EAAKC,EAAOC,GACxB,UAAtBF,EAAIL,OAAOQ,QACbvB,GAAGwB,KAAKJ,GAAKR,UAGjBZ,GAAGU,IAAI,mBAAmBE,QAC1BZ,GAAGU,IAAI,iBAAiBR,KAAK,SAAUuB,GACrCC,OAAOD,EAAGV,OAAOY,eAAeC,GAAGC,QAAQ,6BAE7C7B,GAAGgB,SAAS,4CAA4CJ,QACxDJ,QAAQsB,OAAO,oBAIf9B,GAAG+B,KACD,uBACA,iDACA7B,KAAK,SAAU8B,GAEfC,QAAQC,IAAIF,EAAOG,KAAK,IAExBT,OAAOZ,GAAUc,GAAGQ,MAAMJ,EAAOG,KAAK,GAAGE,KAG3CrC,GAAGsC,SAAS,iDAAiDpC,KAAK,SAASa,GACzEW,OAAOX,GAAMa,GAAGC,QAAQf","file":"EXCEL_VERIFY.min.js","sourcesContent":["/// <reference types=\"Cypress\" />\r\nimport neatCsv from \"neat-csv\";\r\nconst excelToJson = require(\"convert-excel-to-json\");\r\nconst fs = require(\"fs\");\r\n// @ts-ignore\r\n\r\ndescribe(\"Verify Excel\", () => {\r\n  it(\"Inject Token And Verify Excel\", async () => {\r\n    //Call the custom command LoginAPI() to get the token\r\n    var prodText;\r\n    // @ts-ignore\r\n    cy.LoginAPI().then(function () {\r\n      cy.visit(\"https://rahulshettyacademy.com/client\", {\r\n        onBeforeLoad: function (window) {\r\n          window.localStorage.setItem(\"token\", Cypress.env(\"token\"));\r\n        },\r\n      });\r\n    });\r\n    cy.get(\".card-body button:last-of-type\").eq(0).click();\r\n    cy.get(\".card-body b\")\r\n      .eq(0)\r\n      .then((element) => {\r\n        prodText = element.text();\r\n      });\r\n    cy.get('button[routerlink=\"/dashboard/cart\"]').click();\r\n    cy.contains(\"Checkout\").click();\r\n    \r\n    cy.get('input[placeholder=\"Select Country\"]').type(\"Ind\");\r\n    cy.wait(2000)\r\n    cy.get(\".ta-results button span\").each(($el, index, $list) => {\r\n      if ($el.text().trim() === \"India\") {\r\n        cy.wrap($el).click();\r\n      }\r\n    });\r\n    cy.get(\".action__submit\").click();\r\n    cy.get(\".hero-primary\").then(function (el) {\r\n      expect(el.text().toUpperCase()).to.include(\"THANKYOU FOR THE ORDER.\");\r\n    });\r\n    cy.contains(\"Click To Download Order Details in Excel\").click();\r\n    Cypress.config(\"fileServerFolder\");\r\n    // const result = excelToJson({\r\n    //   source: fs.readFileSync(\"cypress/downloads/order-invoice_fagun.qa.xlsx\"), // fs.readFileSync return a Buffer\r\n    // });\r\n    cy.task(\r\n      \"excelToJsonConverter\",\r\n      \"cypress/downloads/order-invoice_fagun.qa.xlsx\"\r\n    ).then(function (result) {\r\n      // @ts-ignore\r\n      console.log(result.data[0]);\r\n      // @ts-ignore\r\n      expect(prodText).to.equal(result.data[1].B)\r\n    });\r\n\r\n    cy.readFile(\"cypress/downloads/order-invoice_fagun.qa.xlsx\").then(function(text){\r\n      expect(text).to.include(prodText)\r\n    })\r\n\r\n    // Browser(JS Engine) -> JS Code -> Client Side Environment (Front End)\r\n    // Node (Engine) -> JS Code -> Backend applications/environment\r\n    // Node Supports Accessing file system - fs, Database\r\n    // Cypress doesnt support fs and should be configured as tasks => Tasks(fs,db) in config.js/.ts\r\n  });\r\n});\r\n"]}